//============================================================
// =Modify
//============================================================

// Mix $color by $weight with the color obtained by calling $function with
//  $color followed by the given arguments.
//------------------------------------------------------------
@function weighted($function, $weight, $color, $args...) {
  // We need to compile a new argument list for call() since the '...'
  //  syntax has no effect when it's not the only argument being passed.
  $compiledArgumentList: ($function, $color);
  @each $arg in $args {
    $compiledArgumentList: append($compiledArgumentList, $arg);
  }
  @return mix(call($compiledArgumentList...), $color, $weight);
}

// Makes color more or less 'intense' compared to a reference
//  color, uses $strongestContrast and $weakerContrast variables
//  obtained from `palette('{fg|bg}{Main|Alt}')` as references.
// ie.: like 'darken()' but will 'lighten()' instead if the reference
//  color is dark.
//------------------------------------------------------------
// Intensify
//------------------------------
@function intensify-saturation($color, $contrastedColor, $weight: 50%) {
  $weightedSaturationContrast: abs($strongestSaturationContrast) *
    contrast($color, $contrastedColor);
 @return mix(
    adjust-color($color, $lightness: $weightedSaturationContrast),
    $color,
    $weight);
}
@function intensify-lightness($color, $contrastedColor, $weight: 50%) {
  $weightedContrast: abs($strongestContrast) *
    contrast($color, $contrastedColor);
 @return mix(
    adjust-color($color, $lightness: $weightedContrast),
    $color,
    $weight);
}
// Apply all intensify functions
@function intensify($color, $contrastedColor, $weight: 50%) {
  @return intensify-lightness(
    intensify-saturation($color, $contrastedColor, $weight),
    $contrastedColor,
    $weight);
}

// Soften
//------------------------------
@function soften-saturation($color, $contrastedColor, $weight: 50%) {
    $weightedSaturationContrast: abs($weakerSaturationContrast) *
      contrast($color, $contrastedColor);
  @return mix(
    adjust-color($color, $lightness: $weightedSaturationContrast),
    $color,
    $weight);
}
@function soften-lightness($color, $contrastedColor, $weight: 50%) {

  $weightedContrast: abs($weakerContrast) *
    contrast($color, $contrastedColor);
 @return mix(
    adjust-color($color, $lightness: $weightedContrast),
    $color,
    $weight);
}
// Apply all soften functions
@function soften($color, $contrastedColor, $weight: 50%) {
  @return soften-lightness(
    soften-saturation($color, $contrastedColor, $weight),
    $contrastedColor,
    $weight);
}

// Change $color to use the given value form $sourceColor
//------------------------------------------------------------
@function take-red($color, $sourceColor, $weight: 100%) {
  @return mix(change-color($color, $red: red($sourceColor)),
    $color, $weight);
}
@function take-green($color, $sourceColor, $weight: 100%) {
  @return mix(change-color($color, $green: green($sourceColor)),
    $color, $weight);
}
@function take-blue($color, $sourceColor, $weight: 100%) {
  @return mix(change-color($color, $blue: blue($sourceColor)),
    $color, $weight);
}
@function take-hue($color, $sourceColor, $weight: 100%) {
  @return mix(change-color($color, $hue: hue($sourceColor)),
    $color, $weight);
}
@function take-saturation($color, $sourceColor, $weight: 100%) {
  @return mix(change-color($color, $saturation: saturation($sourceColor)),
    $color, $weight);
}
@function take-lightness($color, $sourceColor, $weight: 100%) {
  @return mix(change-color($color, $lightness: lightness($sourceColor)),
    $color, $weight);
}
@function take-alpha($color, $sourceColor, $weight: 100%) {
  @return mix(change-color($color, $alpha: alpha($sourceColor)),
    $color, $weight);
}

// Usage: take(#f00, #654, $red: 100, $lightness: 40, $weight: 90);
@function take($color, $sourceColor, $weight: 100%,
  $lightness: 0, $alpha: 0, $red: 0, $green: 0, $blue: 0, $hue: 0, $saturation: 0) {
  @if red { $color: take-red($color, $sourceColor, $red); }
  @if green { $color: take-green($color, $sourceColor, $green); }
  @if blue { $color: take-blue($color, $sourceColor, $blue); }
  @if lightness { $color: take-lightness($color, $sourceColor, $lightness); }
  @if alpha { $color: take-alpha($color, $sourceColor, $alpha); }
  @if hue { $color: take-hue($color, $sourceColor, $hue); }
  @if saturation { $color: take-saturation($color, $sourceColor, $saturation); }
  @return color;
}

// Shorthand for take-hue + take-saturation
@function take-color($color, $sourceColor, $weight: 100%) {
  @return take($color, $sourceColor,
    $saturation: 100, $hue: 100, $weight: $weight)
}

//
//------------------------------------------------------------
@function percToNum($percentage) {
  @return ($percentage / 100%);
}

@function to-font-weight($weight) {
  $normalWeight: 400; $boldWeight: 700;
  @if ($weight == true) {
    $weight: bold;
  } @else if ($weight == false) {
    $weight: normal;
  } @else {
    @if (type-of($weight) != 'string') {
      @if (unit($weight) == '%') {
        $weight: $normalWeight +
        (($weight / 100%) * ($boldWeight - $normalWeight));
      } @else if $weight > 900 {
        $weight: 900;
      } @else if $weight < 100 {
        $weight: 100;
      } @else {
        $weight: floor($weight / 100) * 100;
      }
    }
  }
  @return $weight;
}

//============================================================
// =Get
//============================================================

//   returns: [-100, 100]
//           > 0: dark on light
//           < 0: light on dark
@function contrast-lightness($fgColor, $bgColor) {
  @return lightness($bgColor) - lightness($fgColor);
}
@function contrast($fgColor, $bgColor) { 
  @return contrast-lightness($fgColor, $bgColor);
}

//   returns: [-100, 100]
//           > 0: dull on vibrant
//           < 0: vibrant on dull
@function contrast-saturation($fgColor, $bgColor) {
  @return saturation($bgColor) - saturation($fgColor);
}
